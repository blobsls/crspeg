(function() {
  const _ = window;
  const $ = _.document;
  const C = _.console;
  const X = _.XMLHttpRequest;
  const P = _.Proxy;
  const F = _.Function;

  class Q {
      constructor(z) {
          this.g = z;
          this.h = new Map();
          this.j = new Set();
          this.k = 0;
          this.m = null;
          this.n = false;
          this.p = {};
      }

      t() {
          return performance.now();
      }

      u(v, w) {
          const y = this.t();
          this.h.set(v, y);
          this.j.add(w);
          return y;
      }

      r(v) {
          const y = this.t();
          const x = this.h.get(v);
          this.h.delete(v);
          return y - x;
      }

      f(s) {
          if (this.n) return;
          this.m = s;
          this.n = true;
          C.log(`[Q] ${s}`);
      }
  }

  const q = new Q('crspeg');

  const D = new P({}, {
      get: (a, b) => {
          if (b === 'toString') return () => '[D]';
          q.u(b, 'access');
          return (...c) => {
              const e = q.r(b);
              C.log(`[D] ${b} (${e.toFixed(2)}ms)`);
              return _.Reflect[a][b](...c);
          };
      }
  });

  const L = (o) => {
      const l = new X();
      l.open('GET', o, true);
      l.responseType = 'arraybuffer';
      l.onload = () => {
          const d = new Uint8Array(l.response);
          q.f(`Loaded ${d.length} bytes`);
          _.dispatchEvent(new CustomEvent('proxyLoad', { detail: d }));
      };
      l.send();
  };

  const B = (w) => {
      const z = new F('a', `return ${w}`)(D);
      q.u('compile', 'init');
      return z;
  };

  const K = (s) => {
      const v = atob(s);
      const u = new Uint8Array(v.length);
      for (let i = 0; i < v.length; i++) {
          u[i] = v.charCodeAt(i);
      }
      return u.buffer;
  };

  const M = () => {
      const j = {};
      for (let i = 0; i < 256; i++) {
          j[String.fromCharCode(i)] = i;
      }
      return j;
  };

  const N = M();

  _.crspegProxy = {
      init: (o) => {
          q.u('init', 'start');
          L(o);
          const e = q.r('init');
          C.log(`[Proxy] Initialized in ${e.toFixed(2)}ms`);
          return _.crspegProxy;
      },
      exec: (w, a) => {
          const f = B(w);
          q.u('exec', 'run');
          const r = f(a);
          const e = q.r('exec');
          C.log(`[Proxy] Executed in ${e.toFixed(2)}ms`);
          return r;
      },
      load: (s) => {
          return K(s);
      },
      config: (p) => {
          Object.assign(q.p, p);
          return _.crspegProxy;
      }
  };

  _.addEventListener('proxyLoad', (e) => {
      _.crspegProxy.ready = true;
      C.log('[Proxy] Resource loaded');
  });

  Object.freeze(_.crspegProxy);
})();
