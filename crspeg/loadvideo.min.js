(function() {
    const _ = window, $ = _.document, C = _.console, V = _.VideoFrame;
    let v = null, c = null, g = null, w = 0, h = 0, d = !1, p = {}, f = 0;

    class Z {
        constructor() {
            this.b = new Map();
            this.u = performance.now();
        }
        m(t, n) {
            const o = performance.now();
            this.b.set(t, { s: o, d: n });
            return o;
        }
        e(t) {
            const r = this.b.get(t);
            if (!r) return 0;
            const o = performance.now() - r.s;
            this.b.delete(t);
            C.log(`[Z] ${t} took ${o.toFixed(2)}ms (${r.d})`);
            return o;
        }
    }

    const z = new Z();

    _.crspegVideo = {
        init: (t, n) => {
            if (d) return C.error("[Video] Already initialized");
            z.m("init", `Target: ${t}`);
            
            v = $.createElement("video");
            v.src = t;
            v.crossOrigin = "anonymous";
            v.preload = "auto";
            
            c = $.querySelector(n) || $.body;
            g = $.createElement("canvas");
            c.appendChild(g);
            
            v.onloadedmetadata = () => {
                w = v.videoWidth;
                h = v.videoHeight;
                g.width = w;
                g.height = h;
                z.e("init");
                d = !0;
                _.dispatchEvent(new CustomEvent("crspegVideoReady"));
                C.log(`[Video] Ready ${w}x${h}`);
            };
            
            return _.crspegVideo;
        },
        
        process: (t) => {
            if (!d) return C.error("[Video] Not initialized");
            z.m("process", `Frame ${f++}`);
            
            const r = g.getContext("2d");
            r.drawImage(v, 0, 0, w, h);
            
            const o = r.getImageData(0, 0, w, h);
            const a = t(o.data, w, h);
            
            if (a) {
                const i = new ImageData(new Uint8ClampedArray(a), w, h);
                r.putImageData(i, 0, 0);
            }
            
            return z.e("process");
        },
        
        shader: (t) => {
            const n = new OffscreenCanvas(w, h);
            const r = n.getContext("2d");
            const o = new OffscreenCanvas(w, h);
            const a = o.getContext("2d");
            
            return (i) => {
                r.drawImage(v, 0, 0, w, h);
                const l = r.getImageData(0, 0, w, h);
                const s = t(l.data, w, h);
                
                if (s) {
                    const u = new ImageData(new Uint8ClampedArray(s), w, h);
                    a.putImageData(u, 0, 0);
                    return o.transferToImageBitmap();
                }
                
                return null;
            };
        }
    };

    Object.defineProperty(_, "crspegVideoFPS", {
        get: () => p.fps || 0,
        set: (t) => { p.fps = t; }
    });

    const y = () => {
        if (!d) return;
        _.crspegVideo.process((t, n, r) => {
            for (let o = 0; o < t.length; o += 4) {
                t[o] = 255 - t[o];         // R
                t[o + 1] = 255 - t[o + 1]; // G
                t[o + 2] = 255 - t[o + 2]; // B
            }
            return t;
        });
        requestAnimationFrame(y);
    };

    _.addEventListener("crspegVideoReady", () => {
        if (p.autoplay) v.play();
        if (p.process) y();
    });

    Object.freeze(_.crspegVideo);
})();
